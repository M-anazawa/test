・HTTPリバースプロキシ
一般的なHTTP型リバースプロキシの動作は、TLS終端を行って再暗号化するため(リクエストのヘッダーやパスが変更される)、完全なエンドツーエンド通信は実現できず、S3にてAWS SigV4署名検証に引っかかると考えらる（検証未実施。机上確認のみ）
技術的には、Hostヘッダーを原本のまま維持し、リクエストに対して一切の書き換えを行わないように正しく設定すれば実現は可能と考えらる

TLS終端・HTTPリバースプロキシ処理を行う際に、オリジナルのSigV4署名と不整合が生じないようにするための対策が試みられていますが、設定に問題があり実現には至っていないと考えられます

aws_canonical.jsを用いてnginx側でAuthorizationヘッダーを再計算し、バックエンドに転送するリクエストが正しい署名を含むように補正するという意図です。
これにより、nginxでTLS終端を行った結果変更されたリクエスト内容に合わせて、S3が期待するSigV4署名と一致する形にすることで、不整合を防ごうとしています。

次のセキュリティ的なリスクがあるため、試験や実装、運用を適切に行う必要がある
・AWSのSigV4署名は非常にデリケートな計算プロセスであり、実装に不備があると脆弱性を突かれる可能性がある
・プロキシ内部では一旦復号されるため平文の状態となり、内部からの不正アクセスリスクが増大する
・プロキシが攻撃対象になった場合、攻撃者は再計算された認証情報を利用して不正な操作が可能になる可能性がある
・AWSのアクセスキーやシークレットキーがAuthorizationヘッダー再計算用ファイル(aws_canonical.js)に埋め込まれており、これらの情報が漏洩すると、第三者による不正利用のリスクがある


Authorizationヘッダー（SigV4署名）を再計算する方法は、実装や運用の設計が適切であれば有効な手法ですが、いくつかのセキュリティ上の注意点があります。

機密情報の管理
再計算のためには、AWSのアクセスキーやシークレットキーがリバースプロキシ内で利用されます。
これらの情報が漏洩すると、第三者による不正利用のリスクがあるため、リバースプロキシサーバーは厳重に保護し、アクセス制御や監査ログの取得を行う必要があります。

再計算処理の正確性
AWSのSigV4署名は非常にデリケートな計算プロセスです。
再計算処理が正確に実装されていないと、署名の不整合や認証エラー、場合によっては認証回避につながるリスクがあります。
AWSの公式仕様に準拠し、十分なテストとレビューが不可欠です。

TLS終端による中間者リスク
リバースプロキシでTLSを終端する場合、クライアントとプロキシ間の通信は暗号化されていますが、プロキシ内部では復号された平文の状態になります。
したがって、プロキシ内部でのアクセス制御やセキュリティ監視が十分に実施されていないと、内部からの不正アクセスリスクが増大します。

信頼の境界の変更
この方式では、従来のエンドツーエンドのTLS暗号化がプロキシで一旦終了し、再度バックエンドとTLS接続を確立するため、リバースプロキシが信頼できる環境で運用される必要があります。
プロキシが攻撃対象になった場合、攻撃者は再計算された認証情報を利用して不正な操作が可能になる可能性があります。

まとめると、
リバースプロキシでAuthorizationヘッダーを再計算してバックエンドに転送する手法は、正確な実装と十分なセキュリティ対策（機密情報の保護、アクセス制御、内部ネットワークの安全確保など）を講じることで、実用的な方法となり得ます。
ただし、実装ミスや運用上の不備があると、認証情報の漏洩や不正アクセスのリスクが高まるため、リスク評価と継続的なセキュリティ管理が非常に重要です。



・TCPパススルー型リバースプロキシ(znginxのstreamモジュールを使用)
TCPレベル（Layer4）でパススルーされ、TLS終端を行わずに転送するため、エンドツーエンドのTLSセッションが維持されます。従って、S3でのAWS SigV4署名検証に影響を与えないと考えられる






