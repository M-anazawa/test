・HTTP型リバースプロキシ
一般的なHTTP型リバースプロキシの動作は、TLS終端を行って再暗号化するため(リクエストのヘッダーやパスが変更される)、完全なエンドツーエンド通信は実現できず、S3にてAWS SigV4署名検証に引っかかると考えらる（検証未実施。机上確認のみ）
技術的には、Hostヘッダーを原本のまま維持し、リクエストに対して一切の書き換えを行わないように正しく設定すれば実現は可能と考えらる

TLS終端・HTTPリバースプロキシ処理を行う際に、オリジナルのSigV4署名と不整合が生じないようにするための対策が試みられていますが、設定に問題があり実現には至っていないと考えられます

aws_canonical.jsを用いてnginx側でAuthorizationヘッダーを再計算し、バックエンドに転送するリクエストが正しい署名を含むように補正するという意図です。
これにより、nginxでTLS終端を行った結果変更されたリクエスト内容に合わせて、S3が期待するSigV4署名と一致する形にすることで、不整合を防ごうとしています。

・TCPパススルー型リバースプロキシ(znginxのstreamモジュールを使用)
TCPレベル（Layer4）でパススルーされ、TLS終端を行わずに転送するため、エンドツーエンドのTLSセッションが維持されます。従って、S3でのAWS SigV4署名検証に影響を与えないと考えられる






