以下は、nginxのstreamモジュールを利用してTLSセッションを終端せずにTCPレベルで転送する、TCPパススルー型リバースプロキシのサンプル設定例です。
これにより、クライアント（EC2）からの暗号化されたTLS接続が、そのままバックエンド（ここではS3のVPCE）に転送され、途中でnginxが中断・改変することなくエンドツーエンドのTLSが維持されます。

注意
この設定を利用するには、nginxがstreamモジュール（--with-stream オプションでコンパイル済み）を有効にしている必要があります。
S3のエンドポイントは通常ポート443でのTLS通信となるため、以下の例では443ポートを使用しています。

サンプル設定例
# /etc/nginx/nginx.conf

worker_processes auto;
events {
    worker_connections 1024;
}

# TCPレベルのパススルー設定は stream コンテキスト内で記述します
stream {
    # バックエンド（S3 VPCE）の設定
    upstream s3_backend {
        # S3のインターフェースエンドポイント（TLS通信）のホスト名とポート番号を指定します
        server bucket.vpce-<書き換えてください>.s3.ap-northeast-1.vpce.amazonaws.com:443;
    }

    # クライアントからの接続を受け付けるサーバーブロック
    server {
        # クライアントからのTLS接続をそのまま受け付けるポート
        listen 443;

        # 上記で定義したバックエンドへ接続を転送（パススルー）
        proxy_pass s3_backend;

        # オプション設定（接続タイムアウトなど）
        proxy_connect_timeout 5s;
        proxy_timeout 300s;
    }
}



設定のポイント
streamコンテキストの利用
stream { ... } ブロック内でTCPレベルの設定を行うため、HTTPプロキシとは異なり、nginxはTLSを終端せずにそのままバックエンドへ転送します。

upstreamブロック
upstream s3_backend { ... } でバックエンドのS3エンドポイントを定義しています。ここでは、S3のVPCEのホスト名とポート（通常443）を指定してください。

serverブロック
server { ... } 内でクライアントからの接続を受け付け、proxy_pass ディレクティブにより上記upstreamへ転送します。
この構成ではnginxはあくまでTCPレベルのパススルーを行うため、クライアント側で確立されたTLSセッションはバックエンドまで維持されます。

タイムアウト設定
proxy_connect_timeout や proxy_timeout は必要に応じて調整してください。これにより、接続確立や接続維持のタイムアウトを制御できます。

この設定を有効にすることで、EC2からのS3アクセス時にnginxを介してエンドツーエンドのTLSセッションを維持したまま、TCPパススルー型のリバースプロキシを実現できます。
実際の環境に合わせてホスト名やタイムアウト値などを調整の上、十分な動作検証を行ってください。


