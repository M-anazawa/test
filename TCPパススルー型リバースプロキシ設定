以下は、nginxのstreamモジュールを利用してTLSセッションを終端せずにTCPレベルで転送する、TCPパススルー型リバースプロキシのサンプル設定例です。
これにより、クライアント（EC2）からの暗号化されたTLS接続が、そのままバックエンド（ここではS3のVPCE）に転送され、途中でnginxが中断・改変することなくエンドツーエンドのTLSが維持されます。

注意
この設定を利用するには、nginxがstreamモジュール（--with-stream オプションでコンパイル済み）を有効にしている必要があります。
S3のエンドポイントは通常ポート443でのTLS通信となるため、以下の例では443ポートを使用しています。

サンプル設定例
# /etc/nginx/nginx.conf

worker_processes auto;
events {
    worker_connections 1024;
}

# TCPレベルのパススルー設定は stream コンテキスト内で記述します
stream {
    # バックエンド（S3 VPCE）の設定
    upstream s3_backend {
        # S3のインターフェースエンドポイント（TLS通信）のホスト名とポート番号を指定します
        server bucket.vpce-<書き換えてください>.s3.ap-northeast-1.vpce.amazonaws.com:443;
    }

    # クライアントからの接続を受け付けるサーバーブロック
    server {
        # クライアントからのTLS接続をそのまま受け付けるポート
        listen 443;

        # 上記で定義したバックエンドへ接続を転送（パススルー）
        proxy_pass s3_backend;

        # オプション設定（接続タイムアウトなど）
        proxy_connect_timeout 5s;
        proxy_timeout 300s;
    }
}



設定のポイント
streamコンテキストの利用
stream { ... } ブロック内でTCPレベルの設定を行うため、HTTPプロキシとは異なり、nginxはTLSを終端せずにそのままバックエンドへ転送します。

upstreamブロック
upstream s3_backend { ... } でバックエンドのS3エンドポイントを定義しています。ここでは、S3のVPCEのホスト名とポート（通常443）を指定してください。

serverブロック
server { ... } 内でクライアントからの接続を受け付け、proxy_pass ディレクティブにより上記upstreamへ転送します。
この構成ではnginxはあくまでTCPレベルのパススルーを行うため、クライアント側で確立されたTLSセッションはバックエンドまで維持されます。

タイムアウト設定
proxy_connect_timeout や proxy_timeout は必要に応じて調整してください。これにより、接続確立や接続維持のタイムアウトを制御できます。

この設定を有効にすることで、EC2からのS3アクセス時にnginxを介してエンドツーエンドのTLSセッションを維持したまま、TCPパススルー型のリバースプロキシを実現できます。
実際の環境に合わせてホスト名やタイムアウト値などを調整の上、十分な動作検証を行ってください。




以下は、RHEL8/9上でnginxのstreamモジュールを有効にするための一般的な手順です。

1. 既存のnginxパッケージにstreamモジュールが含まれているか確認する
多くの場合、RHEL8/9向けの公式またはEPEL/AppStream由来のnginxパッケージは、streamモジュールを動的モジュールとして含んでいます。

ターミナルで以下のコマンドを実行し、コンパイルオプションに「with-stream」があるか確認します。
nginx -V 2>&1 | grep -o with-stream

結果に with-stream と表示されれば、nginxはstreamモジュールをサポートしています。

2. 動的モジュールとして提供されている場合、通常はモジュールファイルが /usr/lib64/nginx/modules/（またはディストリビューションによって異なるディレクトリ）に配置されています。
たとえば、次のようなモジュールファイルが存在するか確認します。
ls /usr/lib64/nginx/modules/ngx_stream_module.so

3. もしファイルが存在する場合、nginxのメイン設定ファイル（通常 /etc/nginx/nginx.conf）の一番先頭に以下の記述を追加して、モジュールをロードします。
load_module modules/ngx_stream_module.so;

※もし実際のパスが異なる場合は、パッケージのドキュメントや nginx -V の出力を参考にしてください。


2. nginxパッケージにstreamモジュールが含まれていない場合（または最新版を自前で利用したい場合）のソースからのコンパイル方法
必要な依存パッケージをインストール
sudo dnf install gcc openssl-devel pcre-devel zlib-devel make

nginxのソースコードをダウンロード
例として最新版のnginxをダウンロードします（バージョン番号は適宜最新のものに置き換えてください）。
wget http://nginx.org/download/nginx-1.xx.xx.tar.gz
tar zxvf nginx-1.xx.xx.tar.gz
cd nginx-1.xx.xx

configureオプションに --with-stream を指定してコンパイル
例えば、動的モジュールとしてコンパイル可能な互換モード（--with-compat）を指定する場合：
./configure --with-stream --with-compat
make
sudo make install

インストール後の設定
インストールされたモジュールが所定のディレクトリ（例：/usr/local/nginx/modules/ や /etc/nginx/modules/ など）にあることを確認し、nginx.conf の先頭に以下のように記述してロードします。
load_module modules/ngx_stream_module.so;

3. 設定の確認
nginxの再起動・設定テスト

設定ファイルの文法チェックを実施します。
sudo nginx -t

問題がなければ、nginxを再起動またはリロードしてください。
sudo systemctl restart nginx

動作確認
先ほど作成したstreamモジュールを利用する設定（TCPパススルー型リバースプロキシ設定）を有効にし、実際に接続が透過的に転送されるか検証してください。

以上の手順で、RHEL8/9上でnginxのstreamモジュールを有効にし、TCPパススルー型リバースプロキシとして利用できるようになります。
環境やパッケージのバージョンによってはディレクトリ構成やパッケージ名が異なる場合があるので、各環境に合わせた確認・調整を行ってください。



stream モジュールでは rewrite のログは出せませんが、アクセスログ (access_log) を詳細に記録 することで
クライアントの接続状況を監視できます。

stream {
    log_format stream_log '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time';

    access_log /var/log/nginx/stream_access.log stream_log;

    server {
        listen 443;
        proxy_pass backend;
    }
}


アカウントBのS3バケットへアクセスできるようにするためのIAMポリシー
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": [
                "arn:aws:s3:::migration-rev-proxy-s3-dst-bkt",
                "arn:aws:s3:::migration-rev-proxy-s3-dst-bkt/*"
            ]
        }
    ]
}

アカウントBのS3バケットポリシー
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::<アカウントAのID>:role/EC2-S3-Access"
            },
            "Action": [
                "s3:ListBucket",
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": [
                "arn:aws:s3:::migration-rev-proxy-s3-dst-bkt",
                "arn:aws:s3:::migration-rev-proxy-s3-dst-bkt/*"
            ],
            "Condition": {
                "StringEquals": {
                    "aws:SourceVpce": "vpce-xxxxxxxxxxxxxxxxx"
                }
            }
        }
    ]
}


