import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as kms from 'aws-cdk-lib/aws-kms';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as iam from 'aws-cdk-lib/aws-iam';

export class InspectorExportStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // 1. KMS キーの作成
    const inspectorExportKey = new kms.Key(this, 'InspectorExportKey', {
      description: 'KMS key for encrypting Amazon Inspector export reports',
      enableKeyRotation: true,
      // ※本番環境では削除ポリシー等の設定は検討してください
      removalPolicy: cdk.RemovalPolicy.RETAIN,
    });

    // KMS キーポリシーを追加
    inspectorExportKey.addToResourcePolicy(new iam.PolicyStatement({
      sid: "Allow Amazon Inspector to use the key",
      effect: iam.Effect.ALLOW,
      principals: [new iam.ServicePrincipal('inspector2.amazonaws.com')],
      actions: [
        "kms:Decrypt",
        "kms:GenerateDataKey*"
      ],
      resources: ["*"],
      conditions: {
        "StringEquals": {
          "aws:SourceAccount": "111122223333"
        },
        "ArnLike": {
          "aws:SourceArn": "arn:aws:inspector2:Region:111122223333:report/*"
        }
      }
    }));

    // 2. Inspector レポートエクスポート用のS3バケットを作成（SSE‑S3を利用）
    const inspectorExportBucket = new s3.Bucket(this, 'InspectorExportBucket', {
      bucketName: 'amzn-s3-demo-bucket', // 固定名（必要に応じて変更）
      encryption: s3.BucketEncryption.S3_MANAGED, // SSE‑S3（S3管理型キー）で暗号化
      versioned: true,
      removalPolicy: cdk.RemovalPolicy.DESTROY, // スタック削除時にバケットも削除（開発・検証用）
      autoDeleteObjects: true,             // バケット削除前にオブジェクトを自動削除
    });

    // S3 バケットポリシーを追加
    inspectorExportBucket.addToResourcePolicy(new iam.PolicyStatement({
      sid: "allow-inspector",
      effect: iam.Effect.ALLOW,
      principals: [new iam.ServicePrincipal('inspector2.amazonaws.com')],
      actions: [
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:AbortMultipartUpload"
      ],
      // バケット内すべてのオブジェクトに対して許可するため、arnForObjects("*") を使用
      resources: [inspectorExportBucket.arnForObjects("*")],
      conditions: {
        "StringEquals": {
          "aws:SourceAccount": "111122223333"
        },
        "ArnLike": {
          "aws:SourceArn": "arn:aws:inspector2:Region:111122223333:report/*"
        }
      }
    }));

    // 3. CloudFormation 出力（後続の Inspector 設定等で利用可能にするため）
    new cdk.CfnOutput(this, 'InspectorExportBucketName', {
      value: inspectorExportBucket.bucketName,
      description: 'The S3 bucket used for Amazon Inspector export reports',
    });

    new cdk.CfnOutput(this, 'InspectorExportKeyArn', {
      value: inspectorExportKey.keyArn,
      description: 'The ARN of the KMS key used for encrypting the Amazon Inspector export reports',
    });
  }
}

const app = new cdk.App();
new InspectorExportStack(app, 'InspectorExportStack');




以下、それぞれの設定の意味と動作について説明します。

versioned: true
意味: S3バケットのバージョニングを有効にします。
動作: バケット内のオブジェクトが更新または削除された場合でも、以前のバージョンが保持されるようになります。これにより、誤って削除・上書きしたデータを復元することが可能となります。
留意点: バージョニングを有効にすると、古いバージョンのオブジェクトが蓄積されるため、ストレージの使用量が増える可能性があります。

removalPolicy: cdk.RemovalPolicy.DESTROY
意味: この設定は、CloudFormationスタックが削除される際に、対象のS3バケットも削除することを意味します。
動作: スタック削除時に、バケット自体を削除するようCloudFormationに指示します。
留意点: 本番環境で大切なデータを保存している場合、誤ってデータが削除されないよう、通常は RETAIN（保持）に設定することが推奨されます。DESTROY は主に開発・テスト環境で利用されます。

autoDeleteObjects: true
意味: バケットを削除する際、バケット内の全オブジェクト（およびバージョン付きの場合はすべてのバージョン）を自動的に削除する設定です。
動作: 通常、S3バケットは中身が存在すると削除できませんが、この設定により、バケット削除前に中のオブジェクトがすべて自動で削除されるため、バケット自体を確実に削除できます。
留意点: 誤ってデータが削除されるリスクがあるため、本番環境で利用する際は注意が必要です。





S3の暗号化にSSE-S3を使用する
S3バケット自体では、SSE-S3（S3管理型暗号化）を利用してデータを暗号化できます。これにより、S3側で自動的に管理されるキーを用いて、バケット内のオブジェクトが保存時に暗号化されます。

エクスポートにはKMSキーを使用する
一方、Amazon Inspectorのレポートエクスポート機能では、エクスポートされるレポートを暗号化するために、ユーザーが用意したAWS KMSキーが必須です。これは、S3バケット自体の暗号化とは独立した要件となっており、レポートのセキュリティ保護のために別途KMSキーを指定する必要があります。

つまり、S3バケットはSSE-S3で暗号化しながら、レポートエクスポート時には別途指定したKMSキーを使用するという構成は、Amazon Inspectorの要件を満たす正しい設定となります。

