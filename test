以下のような問題点があるため、標準的なHTTPリバースプロキシ（nginxによるプロキシ）として設定しただけでは、そのままでは正常に動作しない可能性が高いです。

背景と問題点
署名付きリクエストの性質
AWS CLI の aws s3 cp は S3 の REST API を利用し、リクエストには AWS SigV4 による署名が付与されます。この署名は、リクエストの HTTP ヘッダー（特に Host ヘッダー）や本文などを含めた「正確な」内容に対して計算されます。
もし途中でリクエスト内容（ヘッダー、URI、ボディなど）が変更されると、S3 側で署名検証が失敗し、リクエストが拒否されます。

今回の経路と潜在的な変更点
経路は
①アカウントAのEC2 →
②アカウントAのNLBインタフェースエンドポイント →
③アカウントBのNLBエンドポイントサービス →
④アカウントBのNLB →
⑤アカウントBのEC2（nginx: リバースプロキシ） →
⑥アカウントBのS3インターフェースエンドポイントサービス →
⑦S3
となります。
特に ⑤ の nginx で HTTP レベルのリバースプロキシ処理を行う場合、nginx が TLS 終端やヘッダーの書き換え（たとえば Host ヘッダーの変更）などを行ってしまうと、元々 EC2 で作成された署名対象の内容と異なってしまい、S3側で署名検証エラーとなるリスクがあります。

もし動作させたい場合
動作させるためには以下のような対策が必要です：

透過型（パススルー）プロキシの実現
nginx を通常の HTTP リバースプロキシではなく、TCPレベルでのパススルー（nginx の stream モジュールなどを使用）として設定し、エンドツーエンドの TLS セッションを確立する必要があります。これにより、クライアントから S3 インターフェースエンドポイントサービス（⑥）まで、リクエスト内容が一切変更されずに転送されます。

ホストヘッダーの維持
もしHTTPプロキシとして動作させる場合は、Host ヘッダーを原本のまま維持し、リクエストに対して一切の書き換えを行わないように設定しなければなりません。
ただし、一般的なHTTPプロキシとしての動作では、TLS終端を行って再暗号化するため、この方法では完全なエンドツーエンド通信は実現できず、署名検証に引っかかる可能性が高いです。

結論
結論として、特別な設定（例：nginxをTCPパススルーとして動作させるなど）を行わなければ、今回の構成でアカウントAのEC2からアカウントBのS3へ、リバースプロキシを経由して aws s3 cp file6.txt s3://アカウントBのS3名 を実行すると、署名検証の失敗等により正常に動作しない可能性が高いです。

つまり、

通常の HTTP リバースプロキシ設定では不可
エンドツーエンドの透過型（パススルー）設定にすれば実現可能な場合もあるが、慎重な構成と検証が必須
この点を踏まえて、構成の設計・設定変更を検討する必要があります。
