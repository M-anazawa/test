// Create RDS SubnetGroup
const rdsSubnetGroup = new rds.SubnetGroup(this, context.rdsSubnetGroupId, {
  vpc,
  description: 'Subnet Group for RDS',
  subnetGroupName: context.rdsSubnetGroupId,
  vpcSubnets: {
    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
  },
});

// Define the DBSnapshotIdentifier
const snapshotIdentifier = 'your-snapshot-identifier'; // ここにスナップショットIDを指定します

// Create RDS Instance from Snapshot
const dbInstance = new rds.DatabaseInstanceFromSnapshot(this, context.rdsDatabaseInstanceId, {
  vpc,
  vpcSubnets: {
    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
  },
  snapshotIdentifier: snapshotIdentifier,
  engine: rds.DatabaseInstanceEngine.postgres({
    version: rds.PostgresEngineVersion.VER_14_9,
  }),
  instanceType: ec2.InstanceType.of(
    ec2.InstanceClass.BURSTABLE3,
    ec2.InstanceSize.LARGE,
  ),
  caCertificate: rds.CaCertificate.RDS_CA_RDS4096_G1,
  storageEncrypted: true,
  credentials: rds.Credentials.fromGeneratedSecret('postgres'),
  multiAz: true,
  subnetGroup: rdsSubnetGroup,
  allocatedStorage: 100,
  maxAllocatedStorage: 1000,
  allowMajorVersionUpgrade: false,
  autoMinorVersionUpgrade: true,
  backupRetention: cdk.Duration.days(7),
  deleteAutomatedBackups: true,
  removalPolicy: cdk.RemovalPolicy.DESTROY,
  deletionProtection: false,
  publiclyAccessible: false,
  securityGroups: [rdsSecurityGroup],
});

dbInstance.connections.allowFrom(ec2Instance, ec2.Port.tcp(5432));

new cdk.CfnOutput(this, context.dbEndpointId, {
  value: dbInstance.instanceEndpoint.hostname,
});

new cdk.CfnOutput(this, context.secretNameId, {
  value: dbInstance.secret?.secretName!,
});
