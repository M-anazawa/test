const allowedIPForAccountsPath = this.node.tryGetContext('allowedIPForAccountsPath');

const accountsPathIPSet = new wafv2.CfnIPSet(this, `${context.webAclNameId}AccountsPathIPSet`, {
  name: `${context.webAclNameId}AccountsPathIPSet`,
  ipAddressVersion: 'IPV4',
  scope: 'REGIONAL',
  addresses: allowedIPForAccountsPath
});

// 基本のルールを定義する配列
const rules: wafv2.CfnWebACL.RuleProperty[] = [
  {
    priority: 1,
    name: 'AWSManagedRulesCommonRuleSet',
    overrideAction: { none: {} },
    visibilityConfig: {
      sampledRequestsEnabled: true,
      cloudWatchMetricsEnabled: true,
      metricName: `${context.webAclNameId}Metric-001`,
    },
    statement: {
      managedRuleGroupStatement: {
        vendorName: "AWS",
        name: "AWSManagedRulesCommonRuleSet",
      },
    },
  },
  {
    priority: 2,
    name: 'CountOrBlockExceptIPSetRule',
    action: isAdhYdxPrd ? { block: {} } : { allow: {} },
    visibilityConfig: {
      sampledRequestsEnabled: true,
      cloudWatchMetricsEnabled: true,
      metricName: `${context.webAclNameId}Metric-002`,
    },
    statement: {
      notStatement: {
        statement: {
          ipSetReferenceStatement: {
            arn: wafIPSet.attrArn,
          },
        },
      },
    },
  },
];

// AAAステージのときにだけ追加する条件分岐
if (stage === 'AAA') {
  rules.push(
    {
      priority: 3,
      name: 'AllowSpecificIPsForAccountsPath',
      action: { allow: {} },  // 許可ルール
      visibilityConfig: {
        sampledRequestsEnabled: true,
        cloudWatchMetricsEnabled: true,
        metricName: `${context.webAclNameId}Metric-003`,
      },
      statement: {
        andStatement: {
          statements: [
            {
              byteMatchStatement: {
                fieldToMatch: { uriPath: {} },
                positionalConstraint: 'STARTS_WITH',
                searchString: '/adh/td_operator/v1/accounts',
                textTransformations: [{ priority: 0, type: 'NONE' }],
              },
            },
            {
              ipSetReferenceStatement: {
                arn: accountsPathIPSet.attrArn,
              },
            },
          ],
        },
      },
    },
    {
      priority: 4,
      name: 'BlockNonMatchingIPsForAccountsPath',
      action: { block: {} },  // ブロックルール
      visibilityConfig: {
        sampledRequestsEnabled: true,
        cloudWatchMetricsEnabled: true,
        metricName: `${context.webAclNameId}Metric-004`,
      },
      statement: {
        andStatement: {
          statements: [
            {
              byteMatchStatement: {
                fieldToMatch: { uriPath: {} },
                positionalConstraint: 'STARTS_WITH',
                searchString: '/adh/td_operator/v1/accounts',
                textTransformations: [{ priority: 0, type: 'NONE' }],
              },
            },
            {
              notStatement: {
                statement: {
                  ipSetReferenceStatement: {
                    arn: accountsPathIPSet.attrArn,
                  },
                },
              },
            },
          ],
        },
      },
    }
  );
}

// Web ACLを作成する際に `rules` 配列を指定
const webAcl = new wafv2.CfnWebACL(this, context.webAclNameId, {
  defaultAction: { allow: {} },
  name: context.webAclNameId,
  scope: 'REGIONAL',
  visibilityConfig: {
    cloudWatchMetricsEnabled: true,
    sampledRequestsEnabled: true,
    metricName: `${context.webAclNameId}Metric-000`,
  },
  rules: rules,  // 定義したルールの配列を渡す
});
