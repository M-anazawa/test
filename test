import os
import boto3
import datetime
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    rds_client = boto3.client('rds')
    sns_client = boto3.client('sns')

    # SNS トピックの ARN を環境変数から取得
    sns_topic_arn = os.environ.get("SNAPSHOT_DELETE_FAILURE_TOPIC_ARN")

    # 現在日時 (タイムゾーン付き UTC) と 7 日前の日時を計算
    now = datetime.datetime.now(datetime.timezone.utc)
    cutoff_date = now - datetime.timedelta(days=7)
    logger.info(f"Deleting manual snapshots older than: {cutoff_date.isoformat()}")

    marker = None

    try:
        while True:
            # パラメータ辞書を作成。marker が存在する場合のみ追加する。
            params = {'SnapshotType': 'manual'}
            if marker:
                params['Marker'] = marker

            response = rds_client.describe_db_snapshots(**params)
            snapshots = response.get('DBSnapshots', [])
            marker = response.get('Marker')

            for snapshot in snapshots:
                snapshot_id = snapshot.get('DBSnapshotIdentifier')
                snapshot_time = snapshot.get('SnapshotCreateTime')

                # 必須フィールドがなければスキップ
                if not snapshot_id or not snapshot_time:
                    continue

                # snapshot_time はタイムゾーン付きと仮定して比較
                if snapshot_time < cutoff_date:
                    logger.info(f"Deleting snapshot: {snapshot_id} (Created at: {snapshot_time.isoformat()})")
                    rds_client.delete_db_snapshot(DBSnapshotIdentifier=snapshot_id)

            # Marker が存在しなければ、最終ページなのでループ終了
            if not marker:
                break

        logger.info("Completed deleting old manual snapshots.")

    except Exception as e:
        logger.error(f"Error deleting snapshots: {e}", exc_info=True)

        # 失敗時のみ SNS 通知する
        if sns_topic_arn:
            try:
                sns_client.publish(
                    TopicArn=sns_topic_arn,
                    Subject="RDS Snapshot Deletion Failed",
                    Message=f"An error occurred while deleting RDS snapshots.\n\nError: {e}"
                )
                logger.info("Failure notification sent to SNS.")
            except Exception as pub_err:
                logger.error(f"Failed to publish SNS notification: {pub_err}", exc_info=True)

        # Lambda 自体を失敗とするため、再度エラーを投げる
        raise e
