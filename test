// wafIPSetAddressesには、cdk.jsonで指定されているIPアドレスのリストが格納されます。
// このリストはWAFでブロックまたは許可するIPアドレスの範囲を定義するために使用されます。

const wafIPSetAddresses = this.node.tryGetContext('wafIPSetAddresses');

// wafv2.CfnIPSetは、指定したIPアドレスのリストに基づいてIPセットを作成します。
// このセットはWAFで使用され、指定されたIPアドレスに対するルールを設定することができます。
// scope: 'REGIONAL'は、WAFが特定のリージョンで使用されることを意味します。

const wafIPSet = new wafv2.CfnIPSet(this, `${context.webAclNameId}IPSet`, {
  name: `${context.webAclNameId}IPSet`,
  ipAddressVersion: 'IPV4',
  scope: 'REGIONAL',
  addresses: wafIPSetAddresses
});

// この行では、現在のステージが "AdhYdxPrd" かどうかをチェックしています。
// この条件により、後でWAFのルールのアクションを切り替えます。

const isAdhYdxPrd: boolean = (stage === "AdhYdxPrd")

// wafv2.CfnWebACLは、WAF ACL (Access Control List)を作成します。
// このWeb ACLにより、指定されたルールに基づいてトラフィックを許可またはブロックすることができます。
// defaultAction: { allow: {} }により、デフォルトのアクションは許可（allow）に設定されています。
// 2つのルールが定義されています。
//     1. AWSManagedRulesCommonRuleSet: 既存のAWSの管理ルールセットを使用し、アクションはカウント（count）に設定されています。
//         これにより、特定の攻撃や不正アクセスのパターンが検知されるものの、ブロックされずにログが記録されます。
//     2. CountOrBlockExceptIPSetRule: このルールでは、isAdhYdxPrdの値に応じてアクションが変わります。
//          isAdhYdxPrdがtrueの場合、IPセット以外のすべてのリクエストをブロック（block）します。それ以外の場合、許可（allow）します

const webAcl = new wafv2.CfnWebACL(this, context.webAclNameId, {
  defaultAction: { allow: {} },
  name: context.webAclNameId,
  scope: 'REGIONAL',
  visibilityConfig: {
    cloudWatchMetricsEnabled: true,
    sampledRequestsEnabled: true,
    metricName: `${context.webAclNameId}Metric-000`,
  },
  rules: [
    {
      priority: 1,
      name: 'AWSManagedRulesCommonRuleSet',
      overrideAction: { count: {} },
      visibilityConfig: {
        sampledRequestsEnabled: true,
        cloudWatchMetricsEnabled: true,
        metricName: `${context.webAclNameId}Metric-001`,
      },
      statement: {
        managedRuleGroupStatement: {
          vendorName: "AWS",
          name: "AWSManagedRulesCommonRuleSet",
        },
      },
    },
    {
      priority: 2,
      name: 'CountOrBlockExceptIPSetRule',
      action: isAdhYdxPrd ? { block: {} } : { allow: {} },
      visibilityConfig: {
        sampledRequestsEnabled: true,
        cloudWatchMetricsEnabled: true,
        metricName: `${context.webAclNameId}Metric-002`,
      },
      statement: {
        notStatement: {
          statement: {
            ipSetReferenceStatement: {
              arn: wafIPSet.attrArn,
            },
          },
        },
      },
    },
  ],
});

// wafv2.CfnWebACLAssociationを使って、作成したWAF WebACLをALB（Application Load Balancer）に関連付けます。
// これにより、ALBへのトラフィックがWeb ACLによってフィルタリングされます。
// webAclAssociation.addDependsOn(webAcl)で、この関連付けがWebACLの作成後に行われるように指定しています。

const webAclAssociation = new wafv2.CfnWebACLAssociation(this, `${context.webAclNameId}AssociationId`, {
  resourceArn: alb.loadBalancerArn,
  webAclArn: webAcl.attrArn,
});
webAclAssociation.addDependsOn(webAcl)

// WAFのログを保存するためのCloudWatch Logsのロググループを作成します。
// removalPolicy: cdk.RemovalPolicy.DESTROYにより、スタック削除時にこのロググループも削除されます。
// wafv2.CfnLoggingConfigurationを使って、Web ACLのログをCloudWatchに送信する設定を行っています。

const logGroup = new LogGroup(this, `aws-waf-logs-${context.webAclNameId}`, {
  logGroupName: `aws-waf-logs-${context.webAclNameId}`,
  removalPolicy: cdk.RemovalPolicy.DESTROY,
});

const logConfig = new wafv2.CfnLoggingConfiguration(this, `${context.webAclNameId}Logconfig`, {
  logDestinationConfigs: [logGroup.logGroupArn],
  resourceArn: webAcl.attrArn,
});

logConfig.addDependsOn(webAcl)
logConfig.addDependsOn(logGroup.node.defaultChild as cdk.CfnResource)
