◾️Route53Stack

・概要
AWS Route 53でホストゾーン（DNSゾーン）を作成するためのスタックです。

・準詳細設計
「adh-custom.treasuredata.co.jp」という名前のパブリックホストゾーンを作成する。
ホストゾーンの保持ポリシーを設定し、誤ってスタックを削除してもDNS設定やドメイン情報が失われないようにします。

◾️CdkCodeCommit

・概要
AWS CodeCommitというGitリポジトリを作成する。

・準詳細設計
AdhCtrlRepo001という名前のリポジトリを作成する。
本リポジトリでCDKコードのバージョン管理を行います。

・関連ドキュメント

◾️CdkIam

・概要
IAMユーザー、IAMグループ、およびポリシーを作成するためのスタックです。

・準詳細設計
バックエンドパイプライン用のGitHub Actionsを介してCodePipelineを開始するためのユーザーとポリシーを作成する。
フロントエンドパイプライン用のGitHub ActionsからS3バケットにアクセスするためのユーザーとポリシーを作成する。
Session Managerのポートフォワーディング機能を使用して、特定のIPアドレスを持つクライアントからRDSへアクセスするためのユーザーとポリシーを作成する。

・関連スクリプト

◾️CdkHealth

・概要
AWS Healthサービスの通知をSlackに転送するためのスタックです。

・準詳細設計
AWS Health通知をEventBridgeを介して特定のSNSトピックに送信し、Slackチャネルに通知を転送する構成を作成する。
Slackチャネル用メールエンドポイントを設定し、このメールアドレスをSNS通知の受信先として設定する。
特定のリージョン（us-east-1とap-northeast-1）でのみEventBridgeルールを設定し、それぞれに対応したイベントをSNSトピックに転送する。
　グローバルイベント：米国東部（us-east-1）リージョン
　リージョン固有のイベント：東京リージョン（ap-northeast-1）

・関連ドキュメント

◾️CdkEcr

・概要
AWS ECRにコンテナイメージをバージョン管理するリポジトリを作成ためのスタックです。

・準詳細設計
2つのリポジトリ（Webproxy用とWebapp用）を作成する。
各リポジトリに最新の3つのイメージのみを保持するライフサイクルポリシーを設定する。
各リポジトリにイメージのプッシュ時に自動セキュリティスキャンを設定する。
イメージタグのイミュータブル(不変性)設定は次に設定する。
　Webproxy：イメージタグ変更不可
　Webapp：イメージタグ変更可

◾️CdkEcr

・概要
本プロジェクトのメインのスタックで、VPC、ALB、ECS on Fargate、RDS、WAF、Pipeline等を作成するためのスタックです。

・準詳細設計

[VPC]
１個のVPCを作成し、その中に次のサブネットを定義する。
    * パブリックサブネット: インターネットと通信可能なサブネット。
    * プライベートサブネット（コンテナ用）: NATゲートウェイ経由で外部通信が可能なサブネット。
    * プライベートサブネット（RDS用）: 完全に閉じたサブネットで、外部通信を行わない。
このVPC内のサブネットが最大2つのアベイラビリティーゾーン（AZ）に分散されるように設定する。
各サブネットのCIDRブロックは次に設定する。
    * パブリックサブネット:/20 CIDRブロック（4096 IPアドレス）
    * プライベートサブネット（コンテナ用）:/20 CIDRブロック（4096 IPアドレス）
    * プライベートサブネット（RDS用）:/22 CIDRブロック（1024 IPアドレス）

・関連ドキュメント
AWSサービス構成図


[セキュリティグループ]
次のセキュリティグループを作成し、それぞれに適切な通信ルール（Ingressルール）を設定する。
    * ALB（Application Load Balancer）用
    * ECS用
    * RDS用
    * VPCエンドポイント用
セキュリティグループに名前を示すタグを設定する。
詳細設定はAWSサービス構成図を参照する。

・関連ドキュメント
AWSサービス構成図



[VPCエンドポイント]
次のVPCエンドポイントをprivateSubnetに作成する。
これにより、これらのサービスへのアクセスがインターネット経由ではなく、VPC内のプライベートネットワーク経由で行えるようになります。
1. ECR（Elastic Container Registry用）インターフェースエンドポイント
2. ECR Docker（ECRイメージのプッシュ/プル用）インターフェースエンドポイント
3. CloudWatch Logs（ログストリーム記録用）インターフェースエンドポイント
4. S3（ストレージアクセス用）ゲートウェイエンドポイント

・関連ドキュメント
エンドポイント管理表



[Route53, ACM, ALB]
Route53、ACM（AWS Certificate Manager）、ALB（Application Load Balancer）を組み合わせたHTTPS対応のロードバランシング構成を作成する。

・構成概要
1. Route53 Hosted Zone:
    * Route53Stackで作成したホストゾーンを参照します。
2. ACM証明書:
    * DNS検証を用いてSSL/TLS証明書を発行します。
    * YDX本番とLDCR本番環境は、Providerにて準備したドメイン用の証明書も使用します。
    * HTTPSリスナーにACM証明書を関連付ける
3. ALB（Application Load Balancer）:
    * インターネットアクセス可能なALB
    * パブリックサブネットに配置
    * HTTPSリスナーを作成し、デフォルト動作とルールを設定します。
4. ALB用ターゲットグループ:
    * ALBがリクエストを転送するターゲットグループ
    * HTTPプロトコルで動作し、ヘルスチェックを設定。/に対してリクエストを行い、200-302のHTTPステータスコードを正常とみなす
5. ALB用HTTPSリスナー:
    * HTTPSポートでリスナーを設定
    * 次のルールを設定する
        * priority 10：トラフィックをALB用ターゲットグループに転送するルールを設定。パスパターンが/*に一致するリクエストをALB用ターゲットグループに転送
        * priority 20：503エラーとともに「Sorry」ページに転送
        * デフォルトアクション：503エラーとともに「Sorry」ページに転送
6. Route53 Aレコード:
    * サブドメインにALBを関連付けるAレコードを作成。

・関連ドキュメント




[ECS on Fargate]
ECS（Elastic Container Service）でFargateを使用したコンテナオーケストレーション環境を構築する。

・構成概要
1. ECSクラスター: コンテナタスクをホストする基盤
2. IAMロール: ECSタスクおよびサービスが必要な権限を提供
3. Fargateタスク定義: 次のコンテナの設定、ポートマッピング、ログ収集を定義
a. Webproxyコンテナ
        * Webproxy用ECRリポジトリ内のイメージを使用する
        * コンテナのポート80をホストポート80にマッピング
        * CloudWatch Logsにコンテナのログを送信
	b. Webappコンテナ
        * Webapp用ECRリポジトリ内のイメージを使用する
        * コンテナのポート3000をホストポート3000にマッピング
        * SSMパラメータストアからコンテナ環境変数として読み込む機密情報（例: DB URLや認証情報）を指定
        * Fluent Bitにコンテナのログを送信
	c. Fluent Bitコンテナ(ログを収集して処理するためのコンテナ)
        * CloudWatch Logsにコンテナのログを送信
  d. Stabコンテナ
        * コンテナのポート4010をホストポート4010にマッピング
        * CloudWatch Logsにコンテナのログを送信
4. Fluent Bit設定用S3バケット
        * Fluent Bit用の設定ファイルをホストするS3バケットを作成
        * ローカルディレクトリのfluentbit-config内のファイルをS3バケットにアップロード
5. ECSサービス
    * Fargateタスクを実行するサービスを定義
    * タスクのデプロイ数を2に設定
    * ECS Execを有効化し、タスクへの直接操作を可能にする
    * サービスをターゲットグループ（ALB経由）に接続



[RDS]
Amazon RDS（Relational Database Service） を構築する。

・構成概要
1. プライマリRDSインスタンス（PostgreSQL）:
    * 本番と検証環境はマルチAZ（高可用性）を有効化。開発環境はシングルAZ
    * バックアップ保持期間を7日に設定
    * 必要に応じてスナップショットからの復元が可能
2. リードレプリカ:
    * プライマリRDSのリードレプリカ(非同期の読み取り専用レプリカ)を作成
    * 全てシングルAZ
3. RDSサブネットグループ:
    * プライベートで外部アクセスが完全に遮断されたサブネットに配置




[VPCフローログ]
VPCフローログを設定する。

・AWS VPC内のネットワークトラフィックを記録し、トラブルシューティング、セキュリティ監査、トラフィック分析などに使用する。
・CloudWatchロググループの作成し、ログをCloudWatch Logsに送信する。
・フローログサービスがCloudWatch Logsにデータを送信するための権限を持つIAMロールを作成・付与する。




[WAF]
AWS WAFv2を構築する。

WAFを配置し、Webアプリケーションのセキュリティを強化する
Web ACLをALBに関連付ける
WAFルールのログを保存するCloudWatchロググループを作成し、作成したCloudWatchロググループにログを送信する
WAFルール設定は、※*＊＊＊を参照する





[CodePipeline]
CodePipelineを使用してWebappの継続的インテグレーションおよびデプロイ（CI/CD）パイプラインを作成する

・CodeBuildのログを保存するCloudWatchロググループを作成する。ログは2年間保持する。
・CodeBuildプロジェクトがECRにアクセスできるようにするIAMポリシーを作成し、作成したポリシーをCodeBuildのIAMロールに付与する。
・CodePipelineの成果物を保存するArtifact用S3バケットを作成する。

・構成概要
このパイプラインは以下のステージで構成されています：
1. Source: GitHubからWebappのソースコードを取得。
2. Build: DockerイメージをビルドしてECRにプッシュ。
3. RDS Snapshot: アプリケーションのリリースごとにRDSスナップショットを取得。
4. Deploy: Fargateを使用してECSにデプロイ。

