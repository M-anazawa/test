import * as stepfunctions from "aws-cdk-lib/aws-stepfunctions";
import * as stepfunctionsTasks from "aws-cdk-lib/aws-stepfunctions-tasks";
import * as cloudwatch from "aws-cdk-lib/aws-cloudwatch";
import * as eventTargets from "aws-cdk-lib/aws-events-targets";
import * as eventbridge from "aws-cdk-lib/aws-events";

// Step Functions タスクでパイプラインを停止するアクションを作成
const stopPipelineTask = new stepfunctionsTasks.CallAwsService(this, "StopPipeline", {
  service: "codepipeline",
  action: "stopPipelineExecution",
  parameters: {
    name: pipeline.pipelineName,
    // パイプライン実行IDはイベントから取得する
    pipelineExecutionId: stepfunctions.JsonPath.stringAt("$.detail.execution-id"),
    abandon: true,
  },
  resultPath: "$.stopResult",
});

// リトライ2回失敗後にパイプラインを停止するための状態マシンの定義
const stateMachineDefinition = new stepfunctions.Choice(this, "RetryCountCheck")
  .when(
    stepfunctions.Condition.numberGreaterThanEquals("$.retryCount", 2),
    stopPipelineTask
  )
  .otherwise(new stepfunctions.Succeed(this, "Success"));

// 状態マシンを作成
const pipelineRetryStateMachine = new stepfunctions.StateMachine(this, "PipelineRetryStateMachine", {
  definition: stateMachineDefinition,
  timeout: cdk.Duration.minutes(5),
});

// CloudWatchイベントの設定
const ecsDeployFailedRule = new eventbridge.Rule(this, "EcsDeployFailedRule", {
  eventPattern: {
    source: ["aws.codepipeline"],
    detailType: ["CodePipeline Action Execution State Change"],
    detail: {
      actionName: ["Deploy"],
      state: ["FAILED"],
    },
  },
});

// イベント発生時に状態マシンを起動
ecsDeployFailedRule.addTarget(new eventTargets.SfnStateMachine(pipelineRetryStateMachine, {
  input: eventbridge.RuleTargetInput.fromObject({
    retryCount: stepfunctions.JsonPath.numberAt("$.retryCount"),
  }),
}));
