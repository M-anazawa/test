######
事前準備
######

・AWS CLIでAWSのパラメータストアにアクセス出来るようにする

・クライアントPC(Mac OS)のターミナル(bash)で次を実施する

　①Homebrew(brew)がインストールされていない場合はインストールする
　------------------------------------------------
　次を参照してインストールする
　https://brew.sh/ja/
　------------------------------------------------

　②pyenvをインストールする
　------------------------------------------------
　$ brew install pyenv
   $ pyenv -v
　[表示例]
　pyenv 2.4.0
　------------------------------------------------

　③pyenvの設定を行う
　------------------------------------------------
　$ echo 'export PYENV_ROOT="$HOME/.pyenv'' >> ~/.zshrc
　$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/zshrc
　$ echo 'eval "$(pyenv init -)"' >> ~/.zshrc
　$ source ~/.zshrc
　------------------------------------------------

　④Pythonをインストールする
　------------------------------------------------
　$ pyenv install 3.12.2
　$ pyenv versions
　[表示例]
　* system (set by /Users/masatsune.anazawa/.pyenv/version)
　  3.12.2
　------------------------------------------------

　⑤Pythonスクリプト実行に必要なモジュールをインストールする
　------------------------------------------------
　$ pip3 install boto3 openpyxl
　------------------------------------------------

　⑥paramフォルダを任意の場所に配置する

　⑦カレントディレクトリをparamフォルダに変更する
　------------------------------------------------
　$ cd /[paramフォルダを配置したディレクトリ]/param
　------------------------------------------------

　⑧setup-param.shに実行権限を付与する
　------------------------------------------------
　$ chmod +x setup-param.sh
　------------------------------------------------

　⑨setup-param.shを実行し、param.pyへのシンボリックリンクを作成する
　------------------------------------------------
　$  ./setup-param.sh
　------------------------------------------------

################
パラメータストア更新方法
################

クライアントPC（Mac OS）のターミナル（bash）で次を実施する

①paramコマンドを実行する
------------------------------------------------
$ param
------------------------------------------------

②次が表示されたら、アクセスしたい環境の番号を入力し、Enterを押す
------------------------------------------------
### 環境リスト ###
1 - YDX_開発環境
2 - YDX_検証環境
3 - YDX_本番環境
4 - LDCR_開発環境
5 - LDCR_検証環境
6 - LDCR_本番環境
7 - TD_開発環境
8 - TD_検証環境
9 - TD_本番環境

作業対象の環境を環境リストから選択してください (1-9の番号を入力、終了するにはEnterまたはCtrl+C): 1
------------------------------------------------

③次が表示されたら、パラメータストアの新規設定・更新・削除を行う
　設定を行わない場合は、noを入力する

　<新規設定の例>
　「/ydx/dev/webapp/env/database_username」を値「postgress」で新規設定しますか？(yes/no): yes
　/ydx/dev/webapp/env/database_username を新規設定しました。

　<更新の例>
　「/ydx/dev/webapp/env/database_username」の値を「postgress」に変更しますか？(yes/no): yes
　/ydx/dev/webapp/env/database_username を更新しました。

　<削除の例>
　「/ydx/dev/webapp/env/database_username」を削除しますか？(yes/no): yes
　/ydx/dev/webapp/env/database_username を削除しました。

④最後に、パラメータストア管理ファイルとパラメータストアの比較結果が表示されます。意図しない設定状態の場合は再度設定を行う

　<差分が無い場合の表示例>
　[パラメータストア管理ファイルとパラメータストアの比較結果]
　パラメータストア管理ファイルとパラメータストアに差分はありません。

　<差分がある場合の表示例1>
　[パラメータストア管理ファイルとパラメータストアの比較結果]
　- 「/ydx/dev/webapp/env/database_username」がパラメータストアに設定されていません。

　<差分がある場合の表示例2>
　[パラメータストア管理ファイルとパラメータストアの比較結果]
　- 「/ydx/dev/webapp/env/database_username」の値が異なります。
　  パラメータストア設定値「postgress」、パラメータストア管理ファイル「postgress-test」

　<差分がある場合の表示例3>
　[パラメータストア管理ファイルとパラメータストアの比較結果]
　- 「/ydx/dev/webapp/env/database_username」が削除されていません。

setup-param.sh
---
#!/bin/bash
set -eu

# 'param.py' スクリプトの絶対ディレクトリを取得
DIR=$(dirname "$(readlink -f "$0")")

# 既にシンボリックリンクが存在するかチェック
if [ -e /usr/local/bin/param ]; then
    read -p "/usr/local/bin/paramは既に存在します。上書きしますか？ (y/n): " answer
    case $answer in
        [Yy]* ) ;;
        * ) echo "中止します"; exit 1;;
    esac
fi

# 'param.py' へのシンボリックリンクを /usr/local/bin に作成
ln -sf "${DIR}/param.py" /usr/local/bin/param

# 'param.py' に実行権限を付与
chmod +x "${DIR}/param.py"

echo "param.py スクリプトへのパスが設定され、実行権限が付与されました。"
---




param.py
---
#!/usr/bin/env python3

# プログラムをクリーンに終了させるため
import sys

# AWSサービスをPythonから利用するためのAWS SDKであるBoto3をインポート
import boto3

# Excelファイルを読み込んだり編集したりするためのPythonライブラリであるopenpyxlからload_workbook関数をインポート
from openpyxl import load_workbook

# AWS SSMクライアント作成
ssm_client = boto3.client('ssm', region_name='ap-northeast-1')

# 環境選択
def select_environment():
    environment_list = [
        "YDX_開発環境", "YDX_検証環境", "YDX_本番環境",
        "LDCR_開発環境", "LDCR_検証環境", "LDCR_本番環境",
        "TD_開発環境", "TD_検証環境", "TD_本番環境"
    ]
    print("### 環境リスト ###")
    for i, env in enumerate(environment_list, 1):
        print(f"{i} - {env}")
    while True:
        try:
            selected = input("\n作業対象の環境を環境リストから選択してください (1-9の番号を入力、終了するにはEnterまたはCtrl+C): ")
            if selected.strip() == "":
                sys.exit("プログラムを終了します。")
            selected = int(selected)
            if 1 <= selected <= 9:
                return environment_list[selected - 1]
            else:
                print("入力が正しくありません。1から9の番号を入力してください。")
        except ValueError:
            print("有効な数字を入力してください。")
        except KeyboardInterrupt:
            sys.exit("プログラムを終了します。")

# Excelファイルからパラメータ読み込み
def read_parameters_from_excel(sheet_name):
    file_name = '環境変数一覧.xlsx'
    wb = load_workbook(filename=file_name, data_only=True)
    ws = wb[sheet_name]
    parameters = {}
    for row in ws.iter_rows(min_row=3):
        name = row[5].value  # F列
        value = row[3].value  # D列
        delete_flag = row[6].value  # G列
        if name and 'database_password' not in name:
            parameters[name] = (value, delete_flag == 'delete')
    return parameters

# yes/no入力処理
def ask_yes_no(question):
    response = None
    while response not in ['yes', 'no']:
        response = input(question).lower()
        if response not in ['yes', 'no']:
            print("入力が無効です。'yes' または 'no' で答えてください。")
    return response == 'yes'

# パラメータストア更新
def sync_parameters(parameters):
    for name, (value, is_delete) in parameters.items():
        try:
            current_value = ssm_client.get_parameter(Name=name, WithDecryption=True)['Parameter']['Value']
        except ssm_client.exceptions.ParameterNotFound:
            current_value = None

        if is_delete:
            if current_value and ask_yes_no(f"「{name}」を削除しますか？(yes/no): "):
                ssm_client.delete_parameter(Name=name)
                print(f"{name} を削除しました。")
        elif current_value is None:
            if ask_yes_no(f"「{name}」を値「{value}」で新規設定しますか？(yes/no): "):
                ssm_client.put_parameter(Name=name, Value=value, Type='String', Overwrite=False)
                print(f"{name} を新規設定しました。")
        elif current_value != value:
            if ask_yes_no(f"「{name}」の値を「{value}」に変更しますか？(yes/no): "):
                ssm_client.put_parameter(Name=name, Value=value, Type='String', Overwrite=True)
                print(f"{name} を更新しました。")

# パラメータストア管理ファイルとパラメータストアの比較
def compare_and_report_differences(parameters):
    print("\n[パラメータストア管理ファイルとパラメータストアの比較結果]")
    ssm_params = {}
    for name, (excel_value, is_delete) in parameters.items():
        try:
            # パラメータを取得し、辞書に追加
            ssm_value = ssm_client.get_parameter(Name=name, WithDecryption=True)['Parameter']['Value']
            ssm_params[name] = ssm_value
        except ssm_client.exceptions.ParameterNotFound:
            # パラメータが見つからない場合、Noneを割り当てる
            ssm_params[name] = None
    
    differences_found = False
    for name, (excel_value, is_delete) in parameters.items():
        ssm_value = ssm_params.get(name, None)
        if is_delete:
            if ssm_value is not None:
                print(f"- 「{name}」が削除されていません。")
                differences_found = True
        elif ssm_value is None:
            print(f"- 「{name}」がパラメータストアに設定されていません。")
            differences_found = True
        elif ssm_value != excel_value:
            print(f"- 「{name}」の値が異なります。")
            print(f"  パラメータストア設定値「{ssm_value}」、パラメータストア管理ファイル「{excel_value}」")
            differences_found = True

    if not differences_found:
        print("パラメータストア管理ファイルとパラメータストアに差分はありません。")

# メイン関数
def main():
    sheet_name = select_environment()
    parameters = read_parameters_from_excel(sheet_name)
    sync_parameters(parameters)
    compare_and_report_differences(parameters)

if __name__ == "__main__":
    main()
---


