function createByteMatchStatement(searchString: string): wafv2.CfnWebACL.ByteMatchStatementProperty {
  return {
    fieldToMatch: { uriPath: {} },
    positionalConstraint: 'STARTS_WITH',
    searchString,
    textTransformations: [{ priority: 0, type: 'NONE' }],
  };
}



rules: [
  {
    priority: 301,
    name: 'SizeRestrictionsBodyExceptionCountRule',
    overrideAction: { count: {} }, // アクションを count に設定
    visibilityConfig: {
      sampledRequestsEnabled: true,
      cloudWatchMetricsEnabled: true,
      metricName: `${context.webACLNameId}Metric-301`,
    },
    statement: {
      andStatement: {
        statements: [
          {
            managedRuleGroupStatement: {
              vendorName: "AWS",
              name: "AWSManagedRulesCommonRuleSet",
              excludedRules: [
                {
                  name: 'SizeRestrictions_BODY', // SizeRestrictions_BODYルールにのみ例外を適用
                },
              ],
            },
          },
          {
            orStatement: {
              statements: [
                {
                  byteMatchStatement: createByteMatchStatement('/test/123/aaa/'),
                },
                {
                  byteMatchStatement: createByteMatchStatement('/test/123/bbb/'),
                },
              ],
            },
          },
        ],
      },
    },
  },
  {
    priority: 302,
    name: 'SizeRestrictionsBodyExceptionNoneRule',
    overrideAction: { none: {} }, // アクションを none に設定
    visibilityConfig: {
      sampledRequestsEnabled: true,
      cloudWatchMetricsEnabled: true,
      metricName: `${context.webACLNameId}Metric-302`,
    },
    statement: {
      andStatement: {
        statements: [
          {
            managedRuleGroupStatement: {
              vendorName: "AWS",
              name: "AWSManagedRulesCommonRuleSet",
              excludedRules: [
                {
                  name: 'SizeRestrictions_BODY', // SizeRestrictions_BODYルールにのみ例外を適用
                },
              ],
            },
          },
          {
            notStatement: {
              statement: {
                orStatement: {
                  statements: [
                    {
                      byteMatchStatement: createByteMatchStatement('/test/123/aaa/'),
                    },
                    {
                      byteMatchStatement: createByteMatchStatement('/test/123/bbb/'),
                    },
                  ],
                },
              },
            },
          },
        ],
      },
    },
  },
],

